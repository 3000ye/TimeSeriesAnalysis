[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TimeSeriesAnalysis",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#关于本网页",
    "href": "index.html#关于本网页",
    "title": "TimeSeriesAnalysis",
    "section": "关于本网页",
    "text": "关于本网页\n本书为北京大学数学科学学院金融数学系金融数学应用硕士《金融时间序列分析》的阅读笔记，原文示例代码使用 R 语言进行编写，本文实现了 Python 语言版本。",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#本书内容",
    "href": "index.html#本书内容",
    "title": "TimeSeriesAnalysis",
    "section": "本书内容",
    "text": "本书内容\n\n\n收益率，债券，波动率，金融数据示例，收益率分布性质，金融数据可视化，统计分布复习;\n线性时间序列：款平稳，自相关系数函数，ACF的白噪声检验， AR, 偏相关系数，定阶与参数估计，预测，MA， ARMA, ARIMA，单位根过程，单位根检验， 指数平滑方法，季节模型， 回归模型的序列相关误差项，协整， 长记忆模型，模型比较与模型平均 线性时间序列的案例研究;\n资产波动率，ARCH效应，ARCH模型，GARCH模型，IGARCH模型， GARCH-M模型，EGARCH模型, TGARCH模型, APARCH模型， 非对称GARCH模型，随机波动率模型 波动率模型案例研究;\n多元时间序列的基础知识和VAR模型， 协整和协整检验，格兰杰因果性;\n状态空间模型介绍。",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html",
    "href": "Ch1/1-金融数据及其特征.html",
    "title": "1  金融数据及其特征",
    "section": "",
    "text": "1.1 资产收益率",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#债券收益和价格",
    "href": "Ch1/1-金融数据及其特征.html#债券收益和价格",
    "title": "1  金融数据及其特征",
    "section": "1.2 债券收益和价格",
    "text": "1.2 债券收益和价格",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#隐含波动率",
    "href": "Ch1/1-金融数据及其特征.html#隐含波动率",
    "title": "1  金融数据及其特征",
    "section": "1.3 隐含波动率",
    "text": "1.3 隐含波动率",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#收益率分布特性和探索性分析",
    "href": "Ch1/1-金融数据及其特征.html#收益率分布特性和探索性分析",
    "title": "1  金融数据及其特征",
    "section": "1.4 收益率分布特性和探索性分析",
    "text": "1.4 收益率分布特性和探索性分析",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#收益率的分布特性",
    "href": "Ch1/1-金融数据及其特征.html#收益率的分布特性",
    "title": "1  金融数据及其特征",
    "section": "1.5 收益率的分布特性",
    "text": "1.5 收益率的分布特性",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#金融数据的图形",
    "href": "Ch1/1-金融数据及其特征.html#金融数据的图形",
    "title": "1  金融数据及其特征",
    "section": "1.6 金融数据的图形",
    "text": "1.6 金融数据的图形",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch1/1-金融数据及其特征.html#金融数据常用的分布",
    "href": "Ch1/1-金融数据及其特征.html#金融数据常用的分布",
    "title": "1  金融数据及其特征",
    "section": "1.7 金融数据常用的分布",
    "text": "1.7 金融数据常用的分布",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>金融数据及其特征</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html",
    "href": "Ch2/2-线性时间序列模型.html",
    "title": "2  线性时间序列模型",
    "section": "",
    "text": "2.1 介绍\n课程采用蔡瑞胸（Ruey S. Tsay）的《金融数据分析导论：基于R语言》(Tsay 2013) （An Introduction to Analysis of Financial Data with R）作为主要教材之一。 “线性时间序列模型”这一部分是教材的第二章和第三章的授课笔记， 本章讲授时间序列的线性模型，包括：",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html#介绍",
    "href": "Ch2/2-线性时间序列模型.html#介绍",
    "title": "2  线性时间序列模型",
    "section": "",
    "text": "一些基本概念\nAR, MA, ARMA模型\n单位根过程\n指数平滑\n季节模型\n回归模型中误差项有序列相关的处理\n长记忆的分数阶差分模型\n模型比较\n实例分析\n\n\n2.1.1 例子：可口可乐公司盈利数据\n序列仍体现出缓慢的、非单调的上升趋势，又有明显的每年的周期变化（称为季节性）， 还有短期的波动：\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/q-ko-earns8309.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\n\ndata[\"pends\"] = pd.to_datetime(data[\"pends\"], format=\"%Y%m%d\")\ndata[\"anntime\"] = pd.to_datetime(data[\"anntime\"], format=\"%Y%m%d\")\ndata[\"value\"] = pd.to_numeric(data[\"value\"])\n\nplt.figure(figsize=(8, 4))\nplt.plot(data[\"pends\"], data['value'], label='Coca Kola Quarterly Return', color='green')\nplt.title('Coca Kola Quarterly Return', fontsize=16)\nplt.grid(True)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n标出不同季节的数据点，可以看出，每年一般冬季和春季最低， 夏季最高，秋季介于夏季和冬季之间：\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/q-ko-earns8309.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\n\ndata[\"pends\"] = pd.to_datetime(data[\"pends\"], format=\"%Y%m%d\")\ndata[\"anntime\"] = pd.to_datetime(data[\"anntime\"], format=\"%Y%m%d\")\ndata[\"value\"] = pd.to_numeric(data[\"value\"])\n\ndata['Date'] = pd.to_datetime(data['pends'])\ndata.set_index('Date', inplace=True)\n\ndata['Year'] = data.index.year\ndata['Quarter'] = data.index.quarter\n\ncpal = ['green', 'red', 'yellow', 'black']\n\nplt.figure(figsize=(8, 8))\n\nplt.plot(data.index, data['value'], label='Coca Kola Quarterly Return', color='gray')\n\nfor i, row in data.iterrows():\n    plt.scatter(row.name, row['value'], color=cpal[row['Quarter'] - 1], s=50)\n\nplt.title('Coca Kola Quarterly Return', fontsize=16)\nplt.grid(True)\n\nquarter_labels = ['Spring', 'Summer', 'Autumn', 'Winter']\nplt.legend([plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=cpal[i], markersize=10) for i in range(4)],\n           quarter_labels,\n           title='Quarter')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2.1.2 例子：标普500指数月对数收益率\n收益率在0上下波动，除了个别时候基本在某个波动范围之内：\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/m-ibmsp-2611.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"], format=\"%Y%m%d\")\ndata[\"ibm\"] = pd.to_numeric(data[\"ibm\"])\ndata[\"sp\"] = pd.to_numeric(data[\"sp\"])\ndata.head()\n\nplt.figure(figsize=(8, 4))\nplt.plot(data[\"date\"], data['sp'], label='S&P 500 Monthly Returns', color='green')\nplt.title('S&P 500 Monthly Returns', fontsize=16)\nplt.grid(True)\nplt.legend()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html#平稳性",
    "href": "Ch2/2-线性时间序列模型.html#平稳性",
    "title": "2  线性时间序列模型",
    "section": "2.2 平稳性",
    "text": "2.2 平稳性\n例子：标普500指数月对数收益率所展示的收益率曲线基本呈现一个在水平线（一般是 0）上下波动，且波动范围基本不变，这样的表现是时间序列【弱平稳序列】的表现。\n例子：可口可乐公司盈利数据所展示的价格曲线呈现出水平的上下起伏，如果分成几段的话，各段的平均值差距较大，这表现出拍【非平稳】的特性。\n时间序列：设有随机变量序列 \\(\\{x_t,t=\\ldots,-2,-1,0,1,2,\\ldots\\}\\),称其为一个时间序列。其中\\(x_t\\)是一个随机变量，也可以写成大写的\\(X_t\\)。时间序列\\(\\{X_t\\}\\)严格来说是一个二元的函数 \\(X(t,\\omega),t\\in\\mathbb{Z}(\\mathbb{Z}\\)表示所有整数组成的集合), \\(\\omega \\in \\Omega\\), \\(\\Omega\\)表示在一定的条件下所有可能的试验结果的集合。经济和金融中的时间序列我们只能观察到其中某一个\\(\\omega_0\\in\\Omega\\)对应的结果，称为一条“轨道”。而针对随机变量的许多理论性质都是在\\(\\omega\\in\\Omega\\)上讨论的，比如\\(EX_t=\\int X_t(\\omega)P(d\\omega)\\)是\\(X_t(\\omega)\\)对\\(\\omega\\in\\Omega\\)的平均。\n为了能够用一条轨道的观测样本得到所有\\(\\omega\\in\\Omega\\)的性质，需要时间序列满足“遍历性”。\n时间序列的样本：设\\(\\{x_t,t=1,2,\\ldots,T\\}\\)是时间序列中的一段。仍将\\(x_t\\)看成随机变量，也可以写成大写 的\\(X_t\\)。如果有了具体数值，那么样本就是一条轨道中的一段。\n自协方差函数：时间序列\\(\\{X_t\\}\\)中两个随机变量的协方差 \\(Cov(X_s,X_t)\\)叫做自协方差。如果 \\(Cov(X_s,X_t)=\\gamma_{|t-s|}\\)仅依赖于\\(t-s\\),则称 \\[\\gamma_k=\\mathrm{Cov}(X_{t-k},X_t),k=0,1,2,\\ldots \\]\n为时间序列\\(\\{X_t\\}\\)的自协方差函数。因为Cov\\(( X_s, X_t) =\\)Cov\\(( X_t, X_s)\\), 所以\\(\\gamma_{-k}=\\gamma_k\\)。易见 \\(\\gamma_0=\\mathrm{Var}(X_t)\\)。\n由Cauchy-Schwartz不等式： \\[|\\gamma_k|=|E[(X_{t-k}-\\mu)(X_t-\\mu)]|\\leq\\left(E(X_{t-k}-\\mu)^2\\:E(X_t-\\mu)^2\\right)^{1/2}=\\gamma_0\\]\n弱平稳序列(宽平稳序列，weakly stationary time series): 如果时间序列\\(\\{X_t\\}\\)存在有限的二阶矩且满足：\n\n\\(EX_t= \\mu\\)与\\(t\\)无关；\n\\(\\mathrm{Var}(X_t)=\\gamma_0\\)与\\(t\\)无关；\n\\(\\gamma _{k}=\\)Cov\\(( X_t- k, X_{t})\\), \\(k= 1, 2, \\ldots\\)与\\(t\\)无关，\n\n则称\\(\\{X_t\\}\\)为弱平稳序列。\n适当条件下可以用时间序列的样本估计自协方差函数，这是用一条轨道的信息推断所有实验结果\\(\\Omega\\),估计公 式为： \\[\\hat{\\gamma}_k=\\frac{1}{T}\\sum_{t=k+1}^T(x_{t-k}-\\bar{x})(x_t-\\bar{x}),k=0,1,\\ldots,T-1\\]\n称\\(\\hat{\\gamma}_k\\)为样本自协方差。 注意这里用了\\(1/T\\)而不是\\(1/(T-k)\\),用\\(1/(T-k)\\)在获得无偏性的同时会造成一 些理论上的困难。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html#相关系数和自相关系数",
    "href": "Ch2/2-线性时间序列模型.html#相关系数和自相关系数",
    "title": "2  线性时间序列模型",
    "section": "2.3 相关系数和自相关系数",
    "text": "2.3 相关系数和自相关系数\n\n2.3.1 相关系数\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/m-ibmsp-2611.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"], format=\"%Y%m%d\")\ndata[\"ibm\"] = pd.to_numeric(data[\"ibm\"])\ndata[\"sp\"] = pd.to_numeric(data[\"sp\"])\ndata.head()\n\nplt.figure(figsize=(8, 4))\nplt.scatter(data[\"sp\"], data['ibm'], label='S&P 500 Monthly Returns', color='green')\nplt.xlabel(\"S&P\", fontsize=14)\nplt.ylabel(\"IBM\", fontsize=14)\nplt.grid(True)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n上图是IBM股票月度简单收益率对标普500收益率的散点图，可以看出两者有明显的正向相关关系。\n两个随机变量\\(X\\)和\\(Y\\)的相关系数定义为：\n\\[\\rho(X,Y)=\\rho_{xy}=\\dfrac{\\mathrm{Cov}(X,Y)}{\\sqrt{\\mathrm{Var}(X)\\mathrm{Var}(Y)}}=\\dfrac{E[(X-\\mu_x)(Y-\\mu_y)]}{\\sqrt{E(X-\\mu_x)^2E(Y-\\mu_y)^2}}\\]\n如果有\\((X,Y)\\)的独立同分布样本\\(( x_t, y_t)\\), \\(t= 1, 2, \\ldots , T\\), 可估计相关系数（皮尔逊，Pearson）为：\n\\[\\hat{\\rho}_{xy}=\\frac{\\sum_{t=1}^T(x_t-\\bar{x})(y_t-\\bar{y})}{\\sqrt{\\sum_{t=1}^T(x_t-\\bar{x})^2\\sum_{t=1}^T(y_t-\\bar{y})^2}}\\]\n对于不独立的样本，比如时间序列样本，也可以计算相关系数，其估计合理性需要一些模型假设。 对于联合分布非正态的情况，有时相关系数不能很好地反映\\(X\\)和\\(Y\\)的正向或者负向的相关。 斯皮尔曼 (Spearman) 相关系数是计算\\(X\\)的样本的秩(名次)与\\(Y\\)的样本的秩之间的相关系数，也称为Spearmam rank correlation。\n另一种常用的非参数相关系数是肯德尔tau(Kendall’s \\(\\tau)\\)系数，反映了一致数对和非一致数对之间的差别。 对随机向量\\((X,Y)\\),设\\((X_1,Y_1),(X_2,Y_2)\\)相互独立且联合分布与\\((X,Y)\\)联合分布相同，定义\\(X\\)和\\(Y\\)的肯 德尔tau系数为：\n\\[\\tau=P\\left[(X_1-X_2)(Y_1-Y_2)&gt;0\\right]-P\\left[(X_1-X_2)(Y_1-Y_2)&lt;0\\right]\\]\n即两个观测的分量次序一致的概率减去分量次序相反的概率。一致的概率越大，说明两个的正向相关性越 强。\n对 IBM 收益率与标普收益率数据计算这三种相关系数：\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/m-ibmsp-2611.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"], format=\"%Y%m%d\")\ndata[\"ibm\"] = pd.to_numeric(data[\"ibm\"])\ndata[\"sp\"] = pd.to_numeric(data[\"sp\"])\ndata.head()\n\npearson_corr = data['ibm'].corr(data['sp'])\nspearman_corr = data['ibm'].corr(data['sp'], method='spearman')\nkendall_corr = data['ibm'].corr(data['sp'], method='kendall')\n\nprint(\"Pearson correlation:\", pearson_corr)\nprint(\"Spearman correlation:\", spearman_corr)\nprint(\"Kendall correlation:\", kendall_corr)\n\n\nPearson correlation: 0.6395978546773113\nSpearman correlation: 0.6065788974589758\nKendall correlation: 0.4328065703413303\n\n\n\n\n2.3.2 自相关函数与白噪声\n设\\(\\{X_t\\}\\)为弱平稳序列，\\(\\{\\gamma_k\\}\\)为自协方差函数。则\n\\[\\rho(X_{t-k},X_t)=\\frac{\\operatorname{Cov}(X_{t-k},X_t)}{\\sqrt{\\operatorname{Var}(X_{t-k})\\operatorname{Var}(X_t)}}=\\frac{\\gamma_k}{\\sqrt{\\gamma_0\\gamma_0}}=\\frac{\\gamma_k}{\\gamma_0},\\:k=0,1,\\ldots,\\:\\forall t\\]\n记\\(\\rho_k=\\gamma_k/\\gamma_0\\), 这是\\(X_t-k\\)与\\(X_t\\)的相关系数且与\\(t\\)无关，称\\(\\{\\rho_k,k=0,1,\\ldots\\}\\)为时间序列\\(\\{X_t\\}\\)的自相关函数 (Autocorrelation function, ACF)。\\(\\rho_0=1\\)。\n如果弱平稳序列\\(\\{X_t\\}\\)满足\\(\\rho_k=0,k=1,2,\\ldots\\), 称\\(\\{X_t\\}\\)为白噪声序列。如果随机变量序列\\(\\{X_t\\}\\)独立且期望和方差不随时间而变，则\\(\\{X_t\\}\\)是白噪声序列，称为独立白噪声。如果独立白噪声还是同分布的，称为独立同分布白噪声。\n适当条件下\\(\\rho_k\\)可以从时间序列样本估计为：\n\\[\\hat{\\rho}_k=\\frac{\\hat{\\gamma}_k}{\\hat{\\gamma}_0},\\:k=0,1,\\ldots \\]\n\\(\\hat{\\rho}_0=1\\)。称\\(\\hat{\\rho}_k,k=1,2,\\ldots\\)为样本自相关函数。\n如果时间序列严平稳遍历，则\\(\\hat{\\rho}_k\\)是\\(\\rho_k\\)的强相合估计。\n若\\(\\{X_t\\}\\)为有二阶矩的独立同分布随机变量列，则 \\(\\hat{\\rho}_k(k&gt;0)\\)渐近服从N\\((0,\\frac1T)\\)。\n如果\\(\\{\\varepsilon_t\\}\\)是零均值独立同分布白噪声，\\(q\\)为非负整数，\\(\\{\\psi_j,j=0,1,\\ldots,q\\}\\)是数列，\\(\\psi_0=1\\), \\[X_t=\\mu+\\sum_{j=0}^q\\psi_j\\varepsilon_{t-j},\\:t\\in\\mathbb{Z},\\]\n则从\\(\\{X_t,t=1,\\ldots,T\\}\\)计算的ACF满足：当\\(k&gt;q\\)时，\\(\\sqrt T\\hat{\\rho}_k\\)渐近服从\\(\\mathbb{N}(0,1+2\\sum_{j=0}^q\\rho_j^2)\\),这称为Bartlett公式。\n\n2.3.2.1 例子：CRSP的第10分位组合的月对数收益率\n第10分位组合是NYSE、AMEX、NASDAQ市值最小的10%股票组成的投资组合， 每年都重新调整。\n\nCRSP是Center for Research in Security Prices, 位于Chicago Booth。\nNYSE(The New York Stock Exchange, 纽约证券交易所),\nAMEX(American Stock Exchange, 美国证券交易所，在纽约华尔街附近)，\nNASDAQ(National Association of Securities Dealers Automated Quotations，纳斯达克，位于纽约)。\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/m-dec12910.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"], format=\"%Y%m%d\")\ndata.set_index(\"date\", inplace=True)\ndata = data.apply(pd.to_numeric)\ndata.head()\n\nplt.figure(figsize=(8, 4))\nplt.plot(data[\"dec10\"], label='CRSP Lower 10% Monthly Returns', color=\"green\")\nplt.title('CRSP Lower 10% Monthly Returns')\nplt.ylabel('d10')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n绘制时间序列的自相关函数图（ACF）：\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nraw_data = []\nwith open(\"../ftsdata/m-dec12910.txt\", \"r\", encoding=\"utf-8\") as file:\n    for line in file.readlines():\n        line = line.strip(\"\\n\").strip(\" \").replace(\"\\t\", \" \").split(\" \")\n        line = list(filter(lambda x: x != \"\", line))\n        raw_data.append(line)\ndata = pd.DataFrame(raw_data[1:], columns=raw_data[0])\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"], format=\"%Y%m%d\")\ndata.set_index(\"date\", inplace=True)\ndata = data.apply(pd.to_numeric)\ndata.head()\n\nfrom statsmodels.graphics.tsaplots import plot_acf\n\nplt.figure(figsize=(8, 4))\nplot_acf(data[\"dec10\"])\nplt.title('ACF of CRSP Lower 10% Monthly Returns')\nplt.show()\n\n\n&lt;Figure size 768x384 with 0 Axes&gt;",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html#线性时间序列",
    "href": "Ch2/2-线性时间序列模型.html#线性时间序列",
    "title": "2  线性时间序列模型",
    "section": "2.4 线性时间序列",
    "text": "2.4 线性时间序列",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  },
  {
    "objectID": "Ch2/2-线性时间序列模型.html#附录补充知识",
    "href": "Ch2/2-线性时间序列模型.html#附录补充知识",
    "title": "2  线性时间序列模型",
    "section": "2.5 附录：补充知识",
    "text": "2.5 附录：补充知识",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>线性时间序列模型</span>"
    ]
  }
]